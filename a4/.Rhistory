mse10 <- mse(abaloneTrain.lm10)
abalone <- read.table("abalone.data", header = FALSE, sep = ",")
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "Whole_Weight", "Shucked_Weight", "Viscera_Weight", "Shell_Weight", "Rings")
str(abalone)
par(mfrow = c(1,2))
hist(abalone$Rings, xlab = "Abalone age",breaks=30 , ylab = "Abalone count", main = "Histogram of abalone count vs abalone age")
boxplot(abalone$Rings, main = "Age of Abalone", las = 2, ylab = "Rings")
set.seed(51940633)
# count half of the rows
sampleSize <- floor(0.5 * nrow(abalone))
# split rows into 2 sets
set <- sample(seq_len(nrow(abalone)), size = sampleSize)
abaloneTrain <- abalone[set, ]
abaloneTest <- abalone[-set, ]
abaloneTrain
abaloneTest
abaloneTrain.lm <- lm(Rings ~ Length, data=abaloneTrain)
summary(abaloneTrain.lm)
plot(abaloneTrain$Rings ~ abaloneTrain$Length, xlab="Abalone length (mm)", ylab="Abalone rings",
pch=16,cex=0.3, main = "Scatter plot of rings vs length")
abline(abaloneTrain.lm, col = "red")
plot(abaloneTrain.lm, which = 2, pch=16, cex=0.3)
abaloneTrain.lm10 <- lm(Rings ~ Length + I(Length^2), data=abaloneTrain)
summary(abaloneTrain.lm10)
par(mfrow= c(2,2))
plot(abaloneTrain.lm10, pch=16, cex=0.3)
abaloneTrain.lm11 <- lm(Rings ~ Length + Sex, data=abaloneTrain)
summary(abaloneTrain.lm11)
abaloneTrain.lm15 <- lm(Rings ~ Length + Sex + Whole_Weight, data=abaloneTrain)
abaloneTrain.forward <- step(abaloneTrain.lm11, scope = list(lower = abaloneTrain.lm11, upper = abaloneTrain.lm15), direction = "forward")
summary(abaloneTrain.forward)
numeric_columns <- sapply(abalone, is.numeric)
corTable <- cor(abalone[, numeric_columns])
diag(corTable) <- NA
maxCor <- max(corTable, na.rm = TRUE)
maxCorIndex <- which(corTable == maxCor, arr.ind = TRUE)
corTable
maxCor
maxCorIndex
abaloneTrain.lm17 <- lm(Rings ~ Length + Whole_Weight, data=abaloneTrain)
summary(abaloneTrain.lm17)
interactionModel <- lm(Rings ~ Length * Whole_Weight, data = abaloneTrain)
summary(interactionModel)
multipleRegression <- lm (Rings ~ ., data = abaloneTrain)
summary(multipleRegression)
myModel <- lm(Rings ~ Sex * Diameter * Height * Whole_Weight *
Shucked_Weight * Viscera_Weight * Shell_Weight, data = abaloneTrain)
summary(myModel)$adj.r.squared
mse <- function(lm){
df <- data.frame(predict = predict(lm, newdata = abaloneTest), actual = abaloneTest$Rings)
print(mean((df$actual - df$predict)^2))
}
mse5 <- mse(abaloneTrain.lm)
mse10 <- mse(abaloneTrain.lm10)
mse11 <- mse(abaloneTrain.lm11)
mse15 <- mse(abaloneTrain.lm15)
mse17 <- mse(abaloneTrain.lm17)
mse18 <- mse(interactionModel)
mse19 <- mse(multipleRegression)
mse21 <- mse(myModel)
library(caret)
knn_mse_test = NULL
for (k in c(10, 50, 100, 200, 300)){
kmod <- knnreg(Rings ~ Length, data = abaloneTrain, k = k)
yhat = predict(kmod, abaloneTest)
knn_mse_test[k] = mean((abaloneTest$Length - yhat)^2)
}
plot(knn_mse_test, type = "b", ylab = "MSE test", xlab = "k", main = "KNN regression")
myModel <- lm(Rings ~ Sex + Diameter + Height + Whole_Weight +
Shucked_Weight + Viscera_Weight + Shell_Weight, data = abaloneTrain)
summary(myModel)$adj.r.squared
multipleRegression <- lm (Rings ~ ., data = abaloneTrain)
summary(multipleRegression)$adj.r.squared
multipleRegression <- lm (Rings ~ ., data = abaloneTrain)
summary(multipleRegression)
multipleRegression <- lm (Rings ~ ., data = abaloneTrain)
summary(multipleRegression)
summary(multipleRegression)$adj.r.squared
# Load necessary libraries
library(caret)
library(dplyr)
# Define the training control for cross-validation
train_control <- trainControl(method = "cv", number = 10)
# Train KNN model
# Specify a grid of k values (for example, from 1 to 20)
k_values <- data.frame(k = seq(1, 50, by = 1))  # Example k values
knn_model <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data=telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = k_values)
# Load necessary libraries
library(caret)
library(dplyr)
# Define the training control for cross-validation
train_control <- trainControl(method = "cv", number = 10)
# Train KNN model
# Specify a grid of k values (for example, from 1 to 20)
k_values <- data.frame(k = seq(1, 50, by = 1))  # Example k values
knn_model <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data=telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = k_values)
telco <- read.table(("telcochurn.csv"), header=TRUE, sep = ",")
telco <- na.omit(telco)
# Make sure its factored into levels Yes and No
telco$Churn <- as.factor(telco$Churn)
telco$tenure <- as.numeric(telco$tenure)
telco$gender <- as.factor(telco$gender)
telco$SeniorCitizen <- as.factor(telco$SeniorCitizen)
telco$Partner <- as.factor(telco$Partner)
telco$Dependents <- as.factor(telco$Dependents)
telco$PhoneService <- as.factor(telco$PhoneService)
telco$MultipleLines <- as.factor(telco$MultipleLines)
telco$InternetService <- as.factor(telco$InternetService)
telco$OnlineSecurity <- as.factor(telco$OnlineSecurity)
telco$OnlineBackup <- as.factor(telco$OnlineBackup)
telco$DeviceProtection <- as.factor(telco$DeviceProtection)
telco$TechSupport <- as.factor(telco$TechSupport)
telco$StreamingTV <- as.factor(telco$StreamingTV)
telco$StreamingMovies <- as.factor(telco$StreamingMovies)
telco$Contract <- as.factor(telco$Contract)
telco$PaperlessBilling <- as.factor(telco$PaperlessBilling)
telco$PaymentMethod <- as.factor(telco$PaymentMethod)
telco$MonthlyCharges <- as.numeric(telco$MonthlyCharges)
telco$TotalCharges <- as.numeric(telco$TotalCharges)
str(telco)
library(ggplot2)
ggplot(telco, aes(x = Churn)) +
geom_bar(fill = c("steelblue", "tomato")) +
labs(title = "Customer Churn Frequency",
x = "Churn Status",
y = "Frequency") +
theme_minimal()
churnPlot <- function(predictor) {
ggplot(telco, aes_string(x = predictor, fill = "Churn")) +  # Use aes_string for dynamic x aesthetic
geom_bar(position = "fill") +
labs(title = paste("Churn Rate by", predictor), x = predictor, y = "Proportion") +  # Make title dynamic
theme_minimal()
}
# Identify categorical predictors
predictors <- colnames(telco)
exclude_columns <- c("customerID","Churn", "MonthlyCharges", "TotalCharges","tenure")
predictors <- predictors[!predictors %in% exclude_columns]
for (predictor in predictors) {
print(churnPlot(predictor))
}
# Create binned tenure categories
telco$tenure_bins <- cut(telco$tenure,
breaks = c(0, 12, 24, 36, 48, 60, Inf),
labels = c("0-12", "13-24", "25-36", "37-48", "49-60", "60+"),
right = FALSE,   # Include the lower bound, exclude the upper
include.lowest = TRUE)  # Include the lowest value
ggplot(telco, aes(x = tenure_bins, fill = Churn)) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by tenure Bins", x = "Tenure (Months)", y = "Proportion") +
theme_minimal()
telco$MonthlyCharges_bins <- cut(telco$MonthlyCharges,
breaks = c(0, 20, 40, 60, 80, 100, Inf),
labels = c("0-20", "21-40", "41-60", "61-80", "81-100", "100+"),
right = FALSE,   # Include the lower bound, exclude the upper
include.lowest = TRUE)  # Include the lowest value
ggplot(telco, aes(x = MonthlyCharges_bins, fill = Churn)) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by MonthlyCharges Bins", x = "MonthlyCharges ($)", y = "Proportion") +
theme_minimal()
telco$TotalCharges_bins <- cut(telco$TotalCharges,
breaks = c(0, 800, 1600, 2400, 3200, 4000, 4800, Inf),
labels = c("0-800", "801-1600", "1601-2400", "2401-3200", "3201-4000", "4001-4800", "4800+"),
right = FALSE,   # Include the lower bound, exclude the upper
include.lowest = TRUE)  # Include the lowest value
ggplot(telco, aes(x = TotalCharges_bins, fill = Churn)) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by TotalCharges Bins", x = "TotalCharges ($)", y = "Proportion") +
theme_minimal()
# First split: 70% training and 30% test
sampleSize <- floor(0.7 * nrow(telco))
set <- sample(seq_len(nrow(telco)), size = sampleSize)
telcoTrain_Pre <- telco[set, ]
telcoTest <- telco[-set, ]
paste("telcoTrain_Pre has", nrow(telcoTrain_Pre), "rows which is", sprintf("%.2f",100 * nrow(telcoTrain_Pre)/nrow(telco)), "% of the dataset")
paste("telcoTest has", nrow(telcoTest), "rows which is", sprintf("%.2f",100 * nrow(telcoTest)/nrow(telco)), "% of the dataset")
# Second split: 80% training and 20% validation from telcoTrain_Pre
trainSampleSize <- floor(0.8 * nrow(telcoTrain_Pre))
set <- sample(seq_len(nrow(telcoTrain_Pre)), size = trainSampleSize)
telcoTrain <- telcoTrain_Pre[set, ]
telcoValidate <- telcoTrain_Pre[-set, ]
paste("telcoTrain has", nrow(telcoTrain), "rows which is", sprintf("%.2f",100 * nrow(telcoTrain)/nrow(telcoTrain_Pre)), "% of the training set")
paste("telcoValidate has", nrow(telcoValidate), "rows which is", sprintf("%.2f",100 * nrow(telcoValidate)/nrow(telcoTrain_Pre)), "% of the training set")
telcoTrain.glm <- glm(Churn ~ tenure + MonthlyCharges + TotalCharges, data=telcoTrain, family= binomial)
summary(telcoTrain.glm)
# Now we use those predictors that is significant
telcoTrain.glm9 <- glm(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data=telcoTrain, family=binomial)
summary(telcoTrain.glm9)
# Load necessary libraries
library(caret)
library(dplyr)
# Define the training control for cross-validation
train_control <- trainControl(method = "cv", number = 10)
# Train KNN model
# Specify a grid of k values (for example, from 1 to 20)
k_values <- data.frame(k = seq(1, 50, by = 1))  # Example k values
knn_model <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data=telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = k_values)
# Display the results
print(knn_model)
plot(knn_model)
# Load necessary libraries
library(caret)
library(dplyr)
# Define the training control for cross-validation
train_control <- trainControl(method = "cv", number = 10)
# Train KNN model
# Specify a grid of k values (for example, from 1 to 20)
k_values <- data.frame(k = seq(1, 50, by = 1))  # Example k values
knn_model <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data=telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = k_values)
# Display the results
print(knn_model)
plot(knn_model)
telco <- read.table(("telcochurn.csv"), header=TRUE, sep = ",")
telco <- na.omit(telco)
# Make sure its factored into levels Yes and No
telco$Churn <- as.factor(telco$Churn)
telco$tenure <- as.numeric(telco$tenure)
telco$gender <- as.factor(telco$gender)
telco$SeniorCitizen <- as.factor(telco$SeniorCitizen)
telco$Partner <- as.factor(telco$Partner)
telco$Dependents <- as.factor(telco$Dependents)
telco$PhoneService <- as.factor(telco$PhoneService)
telco$MultipleLines <- as.factor(telco$MultipleLines)
telco$InternetService <- as.factor(telco$InternetService)
telco$OnlineSecurity <- as.factor(telco$OnlineSecurity)
telco$OnlineBackup <- as.factor(telco$OnlineBackup)
telco$DeviceProtection <- as.factor(telco$DeviceProtection)
telco$TechSupport <- as.factor(telco$TechSupport)
telco$StreamingTV <- as.factor(telco$StreamingTV)
telco$StreamingMovies <- as.factor(telco$StreamingMovies)
telco$Contract <- as.factor(telco$Contract)
telco$PaperlessBilling <- as.factor(telco$PaperlessBilling)
telco$PaymentMethod <- as.factor(telco$PaymentMethod)
telco$MonthlyCharges <- as.numeric(telco$MonthlyCharges)
telco$TotalCharges <- as.numeric(telco$TotalCharges)
str(telco)
library(ggplot2)
ggplot(telco, aes(x = Churn)) +
geom_bar(fill = c("steelblue", "tomato")) +
labs(title = "Customer Churn Frequency",
x = "Churn Status",
y = "Frequency") +
theme_minimal()
churnPlot <- function(predictor) {
ggplot(telco, aes_string(x = predictor, fill = "Churn")) +  # Use aes_string for dynamic x aesthetic
geom_bar(position = "fill") +
labs(title = paste("Churn Rate by", predictor), x = predictor, y = "Proportion") +  # Make title dynamic
theme_minimal()
}
# Identify categorical predictors
predictors <- colnames(telco)
exclude_columns <- c("customerID","Churn", "MonthlyCharges", "TotalCharges","tenure")
predictors <- predictors[!predictors %in% exclude_columns]
for (predictor in predictors) {
print(churnPlot(predictor))
}
# Create binned tenure categories
telco$tenure_bins <- cut(telco$tenure,
breaks = c(0, 12, 24, 36, 48, 60, Inf),
labels = c("0-12", "13-24", "25-36", "37-48", "49-60", "60+"),
right = FALSE,   # Include the lower bound, exclude the upper
include.lowest = TRUE)  # Include the lowest value
ggplot(telco, aes(x = tenure_bins, fill = Churn)) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by tenure Bins", x = "Tenure (Months)", y = "Proportion") +
theme_minimal()
telco$MonthlyCharges_bins <- cut(telco$MonthlyCharges,
breaks = c(0, 20, 40, 60, 80, 100, Inf),
labels = c("0-20", "21-40", "41-60", "61-80", "81-100", "100+"),
right = FALSE,   # Include the lower bound, exclude the upper
include.lowest = TRUE)  # Include the lowest value
ggplot(telco, aes(x = MonthlyCharges_bins, fill = Churn)) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by MonthlyCharges Bins", x = "MonthlyCharges ($)", y = "Proportion") +
theme_minimal()
telco$TotalCharges_bins <- cut(telco$TotalCharges,
breaks = c(0, 800, 1600, 2400, 3200, 4000, 4800, Inf),
labels = c("0-800", "801-1600", "1601-2400", "2401-3200", "3201-4000", "4001-4800", "4800+"),
right = FALSE,   # Include the lower bound, exclude the upper
include.lowest = TRUE)  # Include the lowest value
ggplot(telco, aes(x = TotalCharges_bins, fill = Churn)) +
geom_bar(position = "fill") +
labs(title = "Churn Rate by TotalCharges Bins", x = "TotalCharges ($)", y = "Proportion") +
theme_minimal()
set.seed(51940633)
# First split: 70% training and 30% test
sampleSize <- floor(0.7 * nrow(telco))
set <- sample(seq_len(nrow(telco)), size = sampleSize)
telcoTrain_Pre <- telco[set, ]
telcoTest <- telco[-set, ]
paste("telcoTrain_Pre has", nrow(telcoTrain_Pre), "rows which is", sprintf("%.2f",100 * nrow(telcoTrain_Pre)/nrow(telco)), "% of the dataset")
paste("telcoTest has", nrow(telcoTest), "rows which is", sprintf("%.2f",100 * nrow(telcoTest)/nrow(telco)), "% of the dataset")
# Second split: 80% training and 20% validation from telcoTrain_Pre
set.seed(51940633)
trainSampleSize <- floor(0.8 * nrow(telcoTrain_Pre))
set <- sample(seq_len(nrow(telcoTrain_Pre)), size = trainSampleSize)
telcoTrain <- telcoTrain_Pre[set, ]
telcoValidate <- telcoTrain_Pre[-set, ]
paste("telcoTrain has", nrow(telcoTrain), "rows which is", sprintf("%.2f",100 * nrow(telcoTrain)/nrow(telcoTrain_Pre)), "% of the training set")
paste("telcoValidate has", nrow(telcoValidate), "rows which is", sprintf("%.2f",100 * nrow(telcoValidate)/nrow(telcoTrain_Pre)), "% of the training set")
set.seed(51940633)
telcoTrain.glm <- glm(Churn ~ tenure + MonthlyCharges + TotalCharges, data=telcoTrain, family= binomial)
summary(telcoTrain.glm)
set.seed(51940633)
# Now we use those predictors that is significant
telcoTrain.glm9 <- glm(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data=telcoTrain, family=binomial)
summary(telcoTrain.glm9)
set.seed(51940633)
# Load necessary libraries
library(caret)
library(dplyr)
# Define the training control for cross-validation
train_control <- trainControl(method = "cv", number = 10)
# Train KNN model
# Specify a grid of k values (for example, from 1 to 20)
k_values <- data.frame(k = seq(1, 50, by = 1))  # Example k values
knn_model <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data=telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = k_values)
# Display the results
print(knn_model)
plot(knn_model)
set.seed(51940633)
# Load necessary libraries
library(caret)
library(dplyr)
# Define the training control for cross-validation
train_control <- trainControl(method = "cv", number = 10)
# Train KNN model
# Specify a grid of k values (for example, from 1 to 20)
k_values <- data.frame(k = seq(1, 50, by = 1))  # Example k values
knn_model <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data=telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = k_values)
# Display the results
print(knn_model)
plot(knn_model)
library(caret)
library(dplyr)
set.seed(51940633)
train_control <- trainControl(method = "cv", number = 10)
optimal_k <- data.frame(k = 23)
knn_model_optimal <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data = telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = optimal_k)
print(knn_model_optimal)
library(caret)
library(dplyr)
set.seed(51940633)
train_control <- trainControl(method = "cv", number = 10)
optimal_k <- data.frame(k = knn_model$bestTune$k)
optimal_k
knn_model_optimal <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data = telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = optimal_k)
print(knn_model_optimal)
library(caret)
library(dplyr)
set.seed(51940633)
train_control <- trainControl(method = "cv", number = 10)
knn_model_optimal <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data = telcoTrain,
method = "knn",
trControl = train_control,
k = 23)
library(caret)
library(dplyr)
set.seed(51940633)
train_control <- trainControl(method = "cv", number = 10)
optimal_k <- data.frame(k = knn_model$bestTune$k)
knn_model_optimal <- train(Churn ~ SeniorCitizen + tenure + Contract +
PaymentMethod + PaperlessBilling +
OnlineSecurity + TechSupport + StreamingMovies +
InternetService + MonthlyCharges + TotalCharges,
data = telcoTrain,
method = "knn",
trControl = train_control,
tuneGrid = optimal_k)
print(knn_model_optimal)
# Load necessary libraries
library(MASS)
# Train the LDA model using tenure and TotalCharges as predictors
lda_model <- lda(Churn ~ tenure + TotalCharges, data = telcoTrain)
# Display the LDA model summary
print(lda_model)
# To see the coefficients of linear discriminants
lda_model$scaling
library(MASS)
# Train the QDA model using tenure and TotalCharges as predictors
qda_model <- qda(Churn ~ tenure + TotalCharges, data = telcoTrain)
# Display the LDA model summary
print(qda_model)
# To see the coefficients of linear discriminants
qda_model$scaling
library(MASS)
# Train the QDA model using tenure and TotalCharges as predictors
qda_model <- qda(Churn ~ tenure + TotalCharges, data = telcoTrain)
# Display the LDA model summary
print(qda_model)
# To see the coefficients of linear discriminants
qda_model$scaling
setwd("~/eclipse-workspace/DATA405/a4")
pbinom(50, 100, 0.56, lower.tail = FALSE)
pbinom(50, 100, 0.56)
pbinom(50, 100, 0.56, lower.tail = FALSE)
EuStockMarkets
DAX <- EuStockMarkets[,1] # extract the data
DAXlogreturn <- diff(log(DAX)) # (a) calculate the log returns
drift <- mean(DAXlogreturn) # (b)
acf(DAXlogreturn) # (c) no substantial autocorrelations present
acf(DAXlogreturn^2) # (d) autocorrelations up to lag 2 present
out <- arima(DAXlogreturn^2, order=c(2, 0, 0)) # (e)
phi <- out$coef[1:2]; xbar <- out$coef[3]; s2 <- out$sigma2
n <- length(DAX)
# Simulate from this model # (f)
y <- numeric(n)
y[1:2] <- diff(log(DAX))[1:2] # starting values for process
Z <- rnorm(n) # standard normals used in ARCH
for (i in 3:n) {
s <- sqrt(xbar + phi[1]*y[i-1]^2 + phi[2]*y[i-2]^2)*Z[i]
y[i] <- s
}
# y contains log returns, but an initial value is needed to
# re-accumulate the prices, and the drift term must be added in:
y <- c(log(DAX[1]), y + drift)
DAXsim <- exp(cumsum(y)) # simulated prices
par(mfrow=c(1, 2)) # (g) compare trace plots of real and simulated data.
ts.plot(DAX)
ts.plot(DAXsim)
P <- matrix(
c(0, 1, 0, 0, 0,
0.2, 0.8, 0, 0,
0.32, 0.04, 0.64,
0.512, 0.384, 0.096, 0.008), nrow = 4, byrow = TRUE)
print(table(p))
P <- matrix(
c(0, 1, 0, 0, 0,
0.2, 0.8, 0, 0,
0.32, 0.04, 0.64,
0.512, 0.384, 0.096, 0.008), nrow = 4, byrow = TRUE)
print(table(P))
P <- matrix(
c(0, 1, 0, 0, 0,
0.2, 0.8, 0, 0,
0.32, 0.04, 0.64,
0.512, 0.384, 0.096, 0.008), nrow = 4, byrow = TRUE)
print(P)
P <- matrix(
c(0, 1, 0, 0,
0, 0.2, 0.8, 0,
0, 0.32, 0.04, 0.64,
0.512, 0.384, 0.096, 0.008), nrow = 4, byrow = TRUE)
P2 <- P %*% P
P2[3, 4]
