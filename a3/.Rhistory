x = "Good"
y = "Luck"
paste("", paste(x,y), "!", sep=":-)")
15%%6
15 %% 6
seq(3,8,2)
15 % 6
seq(3,8,2)^(3:1)
y = c(-2,1,3)
y^y
rep(c(2,9,7,3), 1:4)
rep(3,4)
rep(3,by=4)
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
data <- c("red", "blue", "green", "red", "green", "green")
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
levels(factor_data)
# print the factor levels
factor_data
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
factor_data
runif(25,0,5)
samle(1:2, size = 6, replace= TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
x = c(1,7,NA,2,4,3,NA,5,NA,6)
where(x == "NA")
which(x == "NA")
x = c(1,7,NA,2,4,3,NA,5,NA,6)
which(x == "NA")
length(x[(x=="NA")])
which(is.na(x))
which(x[x=="NA"])
which(x == 1)
which(x == 7)
which(x == NA)
which(x == 4)
which(!is.na(x))
is.na(X)
is.na(x)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
y = paste(x[is.na(x)], mean(x[!is.na(x)]))
y
cuckoos
library(DAAG)
cuckoos
library(DAAG)
cuckoos
chickwts
chickwts[3,1]
chickwts[3]
chickwts[3,]
chickwts[71,]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df
df[df$city == Houston]
df[df$city == "Houston":]
df[df$city == "Houston"]
df[df$city == "Houston",]
df[df$city != "Houston",]
df[df$city != "Houston", && df$age > 25]
df[df$city != "Houston", && df$age > 25,]
df[df$city != "Houston", & df$age > 25,]
df[df$city != "Houston" & df$age > 25,]
df[df$city != "Houston" & df$age >= 25,]
df$name
df[1,]
df[2]
women
df[,2]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df[,2]
df[2,2]
df
df[,2]
names(df)
names(df)[,2]
names(df)[2]
rownames(df)
rownames(df)[2]
dim(df)
# Define two vectors
a <- c(1, 2, 3)
b <- c(1.001, 2.002, 3.003)
# Compare the vectors using all.equal()
all.equal(a, b)
identical(a,b)
plot(circumference  ̃ age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference  ̃ age,
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$tree))
for (i in 1:5)
lines(circumference~ age, data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
Orange
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5)
lines(circumference~age, data = subset(Orange, Tree == i), lty = i)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
dotplot(women)
women
dotplot(height~weight, data = women)
barplot(height~weight, data = women)
barplot(height~weight, data = women, main = "women plot")
barplot(height~weight, data = women, main = "women plot", cex:0.5)
barplot(height~weight, data = women, main = "women plot", xlab=" lol")
xyplot(women)
library(DAAG)
install.packages(DAAG)
"DAAG"
library(DAAG)
installed.packages()
install.packages("DAAG")
library(DAAG)
head(litters)
litters
head(litters)
setwd("C:/Users/agarp/DATA405/a3")
dv <- function(x){
ifelse(x > 0, 2 * x * exp(-x^2), 0)
}
set.seed(51940633)
simVals <- rmyV(10000)
rmyV <- function(n) {
u <- runif(n)
x <- sqrt(-log(1 - u))
return(x)
}
dv <- function(x){
ifelse(x > 0, 2 * x * exp(-x^2), 0)
}
set.seed(51940633)
simVals <- rmyV(10000)
hist(simVals, probability = TRUE, breaks = 50,
main = "Histogram of Simulated Values from V with Density Overlay",
xlab = "Values", col = "lightblue", border = "black")
curve(dV(x), add = TRUE, col = "red", lwd = 2)
dV <- function(x){
ifelse(x > 0, 2 * x * exp(-x^2), 0)
}
set.seed(51940633)
simVals <- rmyV(10000)
hist(simVals, probability = TRUE, breaks = 50,
main = "Histogram of Simulated Values from V with Density Overlay",
xlab = "Values", col = "lightblue", border = "black")
curve(dV(x), add = TRUE, col = "red", lwd = 2)
dV <- function(x){
ifelse(x > 0, 2 * x * exp(-x^2), 0)
}
set.seed(51940633)
simVals <- rmyV(10000)
hist(simVals, probability = TRUE, breaks = 50,
main = "Histogram of Simulated Values from V with Density Overlay",
xlab = "Values", col = "lightblue", border = "black")
curve(dV(x), add = TRUE, col = "grey", lwd = 2)
dV <- function(x){
ifelse(x > 0, 2 * x * exp(-x^2), 0)
}
set.seed(51940633)
simVals <- rmyV(10000)
hist(simVals, probability = TRUE, breaks = 50,
main = "Histogram of Simulated Values from V with Density Overlay",
xlab = "Values", col = "lightblue", border = "black")
curve(dV(x), add = TRUE, col = "black", lwd = 2)
rmyX <- function(n){
u <- runif(n)
x <- u^(1/3)
return(x)
}
dX <- function(x){
ifelse(x >= 0 & x <= 1, 3 * x^2, 0)
}
dX <- function(x){
ifelse(x >= 0 & x <= 1, 3 * x^2, 0)
}
set.seed(51940633)
simVals <- rmyX(10000)
hist(simulated_values, probability = TRUE, breaks = 50,
main = "Histogram of Simulated Values from X with PDF Curve",
xlab = "Values", col = "lightblue", border = "black")
dX <- function(x){
ifelse(x >= 0 & x <= 1, 3 * x^2, 0)
}
set.seed(51940633)
simVals <- rmyX(10000)
hist(simulated_values, probability = TRUE, breaks = 50,
main = "Histogram of Simulated Values from X with PDF Curve",
xlab = "Values", col = "lightblue", border = "black")
dX <- function(x){
ifelse(x >= 0 & x <= 1, 3 * x^2, 0)
}
set.seed(51940633)
simVals <- rmyX(10000)
hist(simVals, probability = TRUE, breaks = 50,
main = "Histogram of Simulated Values from X with PDF Curve",
xlab = "Values", col = "lightblue", border = "black")
curve(dX(x), add = TRUE, col = "black", lwd = 2)
rmyY <- function(n, p) {
# Step 1: Determine which distribution to sample from
from_V <- rbinom(n, 1, p)  # Vector of 0s and 1s, where 1 means sample from V
# Step 2: Generate samples from the appropriate distribution
samples <- numeric(n)
samples[from_V == 1] <- rmyV(sum(from_V == 1))  # Generate from V where from_V == 1
samples[from_V == 0] <- rmyX(sum(from_V == 0))  # Generate from X where from_V == 0
return(samples)
}
# Define the combined PDF g(y) for overlaying the histogram
gY <- function(y, p) {
p * (2 * y * exp(-y^2)) + (1 - p) * (ifelse(y >= 0 & y <= 1, 3 * y^2, 0))
}
# Generate 10,000 random values for Y with p = 0.4
set.seed(123)  # for reproducibility
simulated_values_Y <- rmyY(10000, p = 0.4)
# Plot histogram with PDF overlay
hist(simulated_values_Y, probability = TRUE, breaks = 50,
main = "Histogram of Simulated Values from Y with PDF Curve",
xlab = "Values", col = "lightblue", border = "black")
# Overlay the pdf curve
curve(gY(x, p = 0.4), add = TRUE, col = "black", lwd = 2)
