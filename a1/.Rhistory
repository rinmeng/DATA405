getwd()
boxplot(rivers)
rivers
iris
summary(iris)
boxplot(iris$Sepal.Length)
iris$Sepal.Length
head(iris)
summary(iris)
boxplot(Sepal.Length, data = "iris")
boxplot(iris$Sepal.Length, data = Iris)
boxplot(iris$Sepal.Length, data = iris)
boxplot(Sepal.Length, data = iris)
boxplot(Sepal.Length ~ Species, data = iris)
women
boxplot(height ~ weight, data = women)
boxplot(weight ~ height, data = women)
boxplot(weight ~ height, data = women)
boxplot(Sepal.Length ~ Species, data = iris)
boxplot(Sepal.Length ~ Species, data = iris, ylab = "Spela length (cm)", main = "Iris measurements", boxwex = 0.5)
boxplot(Sepal.Length ~ Species, data = iris)
boxplot(Sepal.Length ~ Species, data = iris, ylab = "Spela length (cm)", main = "Iris measurements", boxwex = 0.5)
boxplot(Sepal.Length ~ Species, data = iris)
boxplot(Sepal.Length ~ Species, data = iris, ylab = "Spela length (cm)", main = "Iris measurements", boxwex = 0.5)
orange
Orange
as.character(Orange$Tree)
factor(Orange$Tree)
levels(factor(Orange$Tree))
as.character(Orange$Tree)
plot(circumference ~ age, data= Orange, pch = as.numeric(Orange$Tree))
for (i in Orange$Tree){
lines(circumference ~ age, data= Orange, pch = as.numeric(Orange$Tree))
}
#Question 5
returns1 = diff(EuStockMarkets)
#Question 5
returns1 = diff(EuStockMarkets)
hist(returns1)
hist(returns1, breaks = "scott")
hist(returns1, breaks = "fd")
hist(returns1, breaks = "scott")
hist(returns1, breaks = "fd")
#Question 5
returns1 = diff(EuStockMarkets)
hist(returns1,breaks = "scott")
hist(returns1,breaks = "fd")
#Question 5
returns1 = diff(EuStockMarkets)
hist(returns1)
hist(returns1, breaks = "scott")
hist(returns1, breaks = "fd")
x1 = 1.8
x2 = 9.1
y = 0.1
y.lm (y~x1+x2)
coef(y.lm)
x1 = 1.8
x2 = 9.1
y = 0.1
y.lm = (y~x1+x2)
coef(y.lm)
rWH <- function(n, seed) {
ix <- (171*seed)%%30269
numbers <- numeric(n)
for (i in 1:n) {
ix <- (171*ix)%%30269
numbers[i] <- ix/30269.0
}
numbers
}
rWH(3, 333)
sqrtNA <- function(x) {
if (min(x) < 0) {
message("Error: At least one element of your input is negative.") }
else { sqrt(x)
}
}
sqrtNA(-2)
sqrtNA(2)
rWH <- function(n, seed) {
ix <- (171*seed)%%30269
numbers <- numeric(n)
for (i in 1:n) {
ix <- (171*ix)%%30269
numbers[i] <- ix/30269.0
}
numbers
}
rWH(3, 333)
setwd("~/eclipse-workspace/DATA405/a1")
# Function to calculate GCD of two numbers
gcd <- function(a, b) {
while (b != 0) {
temp <- b
b <- a %% b
a <- temp
}
return(a)
}
# Function to calculate GCD of a set of numbers
gcd_set <- function(numbers) {
result <- numbers[1]
for (i in 2:length(numbers)) {
result <- gcd(result, numbers[i])
}
return(result)
}
# Example usage
numbers <- c(22,44,66)
gcd_result <- gcd_set(numbers)
print(gcd_result)
unirand3 <- function(n, s1, s2) {
u1 <- unirand(n, seed=s1)
u2 <- unirand2(n, seed=s2)
u3 <- u1 + u2 - floor(u1 + u2)
return(u3)
}
result <- unirand3(100, 1, 1)
