x = "Good"
y = "Luck"
paste("", paste(x,y), "!", sep=":-)")
15%%6
15 %% 6
seq(3,8,2)
15 % 6
seq(3,8,2)^(3:1)
y = c(-2,1,3)
y^y
rep(c(2,9,7,3), 1:4)
rep(3,4)
rep(3,by=4)
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
data <- c("red", "blue", "green", "red", "green", "green")
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
levels(factor_data)
# print the factor levels
factor_data
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
factor_data
runif(25,0,5)
samle(1:2, size = 6, replace= TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
x = c(1,7,NA,2,4,3,NA,5,NA,6)
where(x == "NA")
which(x == "NA")
x = c(1,7,NA,2,4,3,NA,5,NA,6)
which(x == "NA")
length(x[(x=="NA")])
which(is.na(x))
which(x[x=="NA"])
which(x == 1)
which(x == 7)
which(x == NA)
which(x == 4)
which(!is.na(x))
is.na(X)
is.na(x)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
y = paste(x[is.na(x)], mean(x[!is.na(x)]))
y
cuckoos
library(DAAG)
cuckoos
library(DAAG)
cuckoos
chickwts
chickwts[3,1]
chickwts[3]
chickwts[3,]
chickwts[71,]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df
df[df$city == Houston]
df[df$city == "Houston":]
df[df$city == "Houston"]
df[df$city == "Houston",]
df[df$city != "Houston",]
df[df$city != "Houston", && df$age > 25]
df[df$city != "Houston", && df$age > 25,]
df[df$city != "Houston", & df$age > 25,]
df[df$city != "Houston" & df$age > 25,]
df[df$city != "Houston" & df$age >= 25,]
df$name
df[1,]
df[2]
women
df[,2]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df[,2]
df[2,2]
df
df[,2]
names(df)
names(df)[,2]
names(df)[2]
rownames(df)
rownames(df)[2]
dim(df)
# Define two vectors
a <- c(1, 2, 3)
b <- c(1.001, 2.002, 3.003)
# Compare the vectors using all.equal()
all.equal(a, b)
identical(a,b)
plot(circumference  ̃ age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference  ̃ age,
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$tree))
for (i in 1:5)
lines(circumference~ age, data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
Orange
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5)
lines(circumference~age, data = subset(Orange, Tree == i), lty = i)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
dotplot(women)
women
dotplot(height~weight, data = women)
barplot(height~weight, data = women)
barplot(height~weight, data = women, main = "women plot")
barplot(height~weight, data = women, main = "women plot", cex:0.5)
barplot(height~weight, data = women, main = "women plot", xlab=" lol")
xyplot(women)
library(DAAG)
install.packages(DAAG)
"DAAG"
library(DAAG)
installed.packages()
install.packages("DAAG")
library(DAAG)
head(litters)
litters
head(litters)
setwd("C:/Users/agarp/DATA405/a1")
install.packages("randomForest")
tinytex::reinstall_tinytex(repository = "illinois")
possible_m <- c(2^31 - 1, 2^32)
solve_lcg <- function(numbers, m) {
n <- length(numbers)
for (i in 2:(n-1)) {
a <- (numbers[i+1] - numbers[i]) * modInverse(numbers[i] - numbers[i-1], m) %% m
c <- (numbers[i+1] - a * numbers[i]) %% m
if (all((a * numbers[1:(n-1)] + c) %% m == numbers[2:n])) {
return(list(a = a, c = c, m = m))
}
}
return(NULL)
}
modInverse <- function(a, m) {
m0 <- m
y <- 0
x <- 1
if (m == 1) return(0)
while (a > 1) {
q <- a %/% m
t <- m
m <- a %% m
a <- t
t <- y
y <- x - q * y
x <- t
}
if (x < 0) x <- x + m0
return(x)
}
numbers <- c(2205, 21065, 5241, 12752, 25817, 6724, 18604, 7158, 21788, 20601)
for (m in possible_m) {
result <- solve_lcg(numbers, m)
if (!is.null(result)) {
print(result)
}
}
