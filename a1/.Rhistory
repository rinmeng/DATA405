x = "Good"
y = "Luck"
paste("", paste(x,y), "!", sep=":-)")
15%%6
15 %% 6
seq(3,8,2)
15 % 6
seq(3,8,2)^(3:1)
y = c(-2,1,3)
y^y
rep(c(2,9,7,3), 1:4)
rep(3,4)
rep(3,by=4)
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
# create a vector of categorical data
data <- c("red", "blue", "green", "red", "green", "green")
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
levels(factor_data)
# print the factor levels
factor_data
# convert the vector to a factor
factor_data <- factor(data)
# print the factor levels
factor_data
runif(25,0,5)
samle(1:2, size = 6, replace= TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:2, size = 6, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(1:6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = TRUE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 2, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = FALSE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
sample(6, size = 6, replace = TRUE)
x = c(1,7,NA,2,4,3,NA,5,NA,6)
where(x == "NA")
which(x == "NA")
x = c(1,7,NA,2,4,3,NA,5,NA,6)
which(x == "NA")
length(x[(x=="NA")])
which(is.na(x))
which(x[x=="NA"])
which(x == 1)
which(x == 7)
which(x == NA)
which(x == 4)
which(!is.na(x))
is.na(X)
is.na(x)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
paste(x[is.na(x)], mean(x[!is.na(x)]))
x = c(1,7,NA,2,4,3,NA,5,NA,6)
y = paste(x[is.na(x)], mean(x[!is.na(x)]))
y
cuckoos
library(DAAG)
cuckoos
library(DAAG)
cuckoos
chickwts
chickwts[3,1]
chickwts[3]
chickwts[3,]
chickwts[71,]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df
df[df$city == Houston]
df[df$city == "Houston":]
df[df$city == "Houston"]
df[df$city == "Houston",]
df[df$city != "Houston",]
df[df$city != "Houston", && df$age > 25]
df[df$city != "Houston", && df$age > 25,]
df[df$city != "Houston", & df$age > 25,]
df[df$city != "Houston" & df$age > 25,]
df[df$city != "Houston" & df$age >= 25,]
df$name
df[1,]
df[2]
women
df[,2]
df <- data.frame(
name = c("John", "Mary", "David", "Sarah"),
age = c(25, 30, 22, 27),
city = c("New York", "Los Angeles", "Chicago", "Houston")
)
df[,2]
df[2,2]
df
df[,2]
names(df)
names(df)[,2]
names(df)[2]
rownames(df)
rownames(df)[2]
dim(df)
# Define two vectors
a <- c(1, 2, 3)
b <- c(1.001, 2.002, 3.003)
# Compare the vectors using all.equal()
all.equal(a, b)
identical(a,b)
plot(circumference  ̃ age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference  ̃ age,
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5) lines(circumference~ age,
data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
plot(circumference~age, data = Orange, pch=as.numeric(Orange$tree))
for (i in 1:5)
lines(circumference~ age, data = subset(Orange, tree == i), lty = i)
legend("topleft", legend = paste("Tree", 1:5), lty = 1:5, pch = 1:5)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
Orange
plot(circumference~age, data = Orange, pch=as.numeric(Orange$Tree))
for (i in 1:5)
lines(circumference~age, data = subset(Orange, Tree == i), lty = i)
legend("topleft", legend = paste("tree", 1:5), lty = 1:5, pch = 1:5)
dotplot(women)
women
dotplot(height~weight, data = women)
barplot(height~weight, data = women)
barplot(height~weight, data = women, main = "women plot")
barplot(height~weight, data = women, main = "women plot", cex:0.5)
barplot(height~weight, data = women, main = "women plot", xlab=" lol")
xyplot(women)
library(DAAG)
install.packages(DAAG)
"DAAG"
library(DAAG)
installed.packages()
install.packages("DAAG")
library(DAAG)
head(litters)
litters
head(litters)
setwd("C:/Users/agarp/DATA405/a1")
ls
std
sampleE <- c(27,48,72,101,98,37,22,55,41,79,58,44,61)
stderr(sampleE)
sampleE <- c(27,48,72,101,98,37,22,55,41,79,58,44,61)
sd(sampleE)
x <- c(27,48,72,101,98,37,22,55,41,79,58,44,61)
sd(x)
boxplot(x)
qqnorm(x)
qqline(x)
t.test(x, mu=50, conf.level = 99)
t.test(x, mu=50, conf.level = 0.99)
papergroup <- factor(rep(1:5, 7))
distances <- rnorm(35, mean = 9, sd = 3)
papergroup
distances
plot(distances
)
qqplot(distances)
rnorm(35, mean = 9, sd = 1)
plot(rnorm(35, mean = 9, sd = 1))
plot(norm(35, mean = 9, sd = 0))
plot(rnorm(35, mean = 9, sd = 0))
rnorm(100, mean = 9, sd=1)
plot( rnorm(100, mean = 9, sd=1))
abline( rnorm(100, mean = 9, sd=1))
boxplot(distances ~ papergroup)
boxplot(distances ~ papergroup, xlab="paper", ylab = "distance", main= "Paper Airplane Experiment Data")
boxplot(distances ~ papergroup, xlab="paper", ylab = "distance", main= "Paper Airplane Experiment Data",las=2)
boxplot(distances ~ papergroup, xlab="paper", ylab = "distance", main= "Paper Airplane Experiment Data")
boxplot(distances ~ papergroup, xlab="paper", ylab = "distance", main= "Paper Airplane Experiment Data",las=2)
anova(lm(distances ~ papergroup))
packages(MPV)
install.packages(MPV)
install.packages("MPV")
ls
table.b3
library(MPV)
b3
b3.lm<- lm(y ~ x7 + x10, data=table.b3)
b3.lm<- lm(y ~ x7 + x10, data=table.b3)
coef(b3.lm)
summary(b3.lm)
predict(b3.lm, newdata=data.frame(x7 = 4, x10 = 5000), interval ="confidence")
# This is very similar to the smoother() function described in the textbook, with median in place
# of mean.
TukeySmooth <- function(x, y, x.min, x.max, window=1) {
xpoints <- seq(x.min, x.max, len=401)
ymedians<- numeric(401)
for (i in 1:length(xpoints)) {
indices <- which(abs(x - xpoints[i]) < window)
if (length(indices) < 1) {
stop("Your choice of window width is too small.")
} else {
ymedians[i] <- median(y[indices])
}
}
data.frame(x = xpoints, y = ymedians)
}
women.TS <- TurkeySmooth(women$weight, women$height, min(women$weight), max(women$weight), 5)
# This is very similar to the smoother() function described in the textbook, with median in place
# of mean.
TurkeySmooth <- function(x, y, x.min, x.max, window=1) {
xpoints <- seq(x.min, x.max, len=401)
ymedians<- numeric(401)
for (i in 1:length(xpoints)) {
indices <- which(abs(x - xpoints[i]) < window)
if (length(indices) < 1) {
stop("Your choice of window width is too small.")
} else {
ymedians[i] <- median(y[indices])
}
}
data.frame(x = xpoints, y = ymedians)
}
women.TS <- TurkeySmooth(women$weight, women$height, min(women$weight), max(women$weight), 5)
plot(women.TS)
plot(women)
lines(women.TS)
plot(women)
lines(women.TS)
women.TS <- TurkeySmooth(women$weight, women$height, min(women$weight), max(women$weight), 5)
plot(women)
lines(women.TS)
women.TS <- TurkeySmooth(women$weight, women$height, x.min = min(women$weight), x.max = max(women$weight), window = 5)
plot(women)
lines(wo)
lines(women)
# This is very similar to the smoother() function described in the textbook, with median in place
# of mean.
TukeySmooth <- function(x, y, x.min, x.max, window=1) {
xpoints <- seq(x.min, x.max, len=401)
ymedians<- numeric(401)
for (i in 1:length(xpoints)) {
indices <- which(abs(x - xpoints[i]) < window)
if (length(indices) < 1) {
stop("Your choice of window width is too small.")
} else {
ymedians[i] <- median(y[indices])
}
}
data.frame(x = xpoints, y = ymedians)
}
women.TS <- TukeySmooth(women$height, women$weight, x.min = 58, x.max=72, window=5)
plot(weight ~ height, data = women)
lines(women.TS)
f <- function(x) x/2 - 24.5/x
curve(f(x), 0.1, 10)
abline(0,1)
# Since the function and the line do not intersect, the function does not have a fixed point
x <- 25
for (i in 1:10) {
x <- f(x)
print(x)
}
